[config]
# Skip loading of all core tasks which saves up a bit on toml parsing and task creation
# skip_core_tasks = true
# Skips loading Git related environment variables
skip_git_env_info = true
# Skips loading rust related environment variables
# skip_rust_env_info = true
# Skips loading the current crate related environment variables
skip_crate_env_info = true

[tasks.install-target-wasm32-unknown-unknown]
args = ["target", "install", "wasm32-unknown-unknown"]
command = "rustup"

[tasks.basic-http-server]
env = { RUSTFLAGS = "-Ctarget-cpu=native" }
install_crate = {crate_name = "basic-http-server", binary = "basic-http-server", test_arg="--help"}

[tasks.wasm-bindgen-cli]
env = { RUSTFLAGS = "-Ctarget-cpu=native" }
install_crate = {crate_name = "wasm-bindgen-cli", binary = "wasm-bindgen", test_arg="--help", min_version = "0.2.78"}

[tasks.compress]
env = { "CARGO_MAKE_RUST_SCRIPT_PROVIDER" = "rust-script", RUSTFLAGS = "" }
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! brotli = "3"
//! ```
fn main() {
	use std::fs::{read, read_to_string, write};
	use std::io::Cursor;

	use brotli::BrotliCompress;
	use brotli::enc::BrotliEncoderParams;

	let (wasm_path, compressed_wasm_path, js_path, wasm_decompress_js_path) = {
		let working_dir =  std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap_or(String::from("./"));

		let mut wasm_path = working_dir.clone();
		wasm_path.push_str("/target/wasm-simd_bg.wasm");

		let mut compressed_wasm_path = working_dir;
		compressed_wasm_path.push_str("/target/wasm-simd_bg.wasm.br");

		let mut js_path = std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap();
		js_path.push_str("/target/wasm-simd.js");

		let mut wasm_decompress_js_path = std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap();
		wasm_decompress_js_path.push_str("/wasm_decompress.js");

		(wasm_path, compressed_wasm_path, js_path, wasm_decompress_js_path)

	};

	let wasm_decompress_js = read_to_string(wasm_decompress_js_path).unwrap();
	let mut js = read_to_string(js_path.clone()).unwrap().replace("return await WebAssembly.instantiateStreaming(module, imports);", "const { decompress } = wasm_bindgen;await wasm_bindgen('./wasm_decompress_bg.wasm');let bytes = decompress(new Uint8Array(await module.arrayBuffer())).buffer;return await WebAssembly.instantiate(bytes, imports);");

	js.insert_str(0, &wasm_decompress_js);

	let wasm_bytes = read(wasm_path).unwrap();
	let len = wasm_bytes.len();
	let mut wasm_bytes = Cursor::new(wasm_bytes);


	let mut compressed_bytes = Vec::with_capacity(3000000);

	println!("Original WASM file length: {:.1}MB", len as f32 / 1000000.0);
	println!("Compressing WASM file...");

	let mut params = BrotliEncoderParams::default();
	params.quality = 2;

	BrotliCompress(&mut wasm_bytes, &mut compressed_bytes, &params).unwrap();

	println!("New compressed WASM file length: {:.1}MB\nThe compressed file is {:.1}% the size of the uncompressed one", compressed_bytes.len() as f32 / 1000000.0, (compressed_bytes.len() as f32 / len as f32) * 100.0 );

	println!("Writing new wasm file...");
	write(compressed_wasm_path, compressed_bytes).unwrap();
    write(js_path, js.as_bytes()).unwrap();

}
'''

[tasks.compress-release]
env = { "CARGO_MAKE_RUST_SCRIPT_PROVIDER" = "rust-script", RUSTFLAGS = "" }
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! brotli = "3"
//! ```
fn main() {
	use std::fs::{read, read_to_string, write};
	use std::io::Cursor;

	use brotli::BrotliCompress;
	use brotli::enc::BrotliEncoderParams;

	let (wasm_path, compressed_wasm_path, js_path, wasm_decompress_js_path) = {
		let mut wasm_path = std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap();
		wasm_path.push_str("/target/wasm-simd_bg.wasm");

		let mut compressed_wasm_path = std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap();
		compressed_wasm_path.push_str("/target/wasm-simd_bg.wasm.br");

		let mut js_path = std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap();
		js_path.push_str("/target/wasm-simd.js");

		let mut wasm_decompress_js_path = std::env::var("CARGO_MAKE_WORKING_DIRECTORY").unwrap();
		wasm_decompress_js_path.push_str("/wasm_decompress.js");

		(wasm_path, compressed_wasm_path, js_path, wasm_decompress_js_path)

	};

	let wasm_decompress_js = read_to_string(wasm_decompress_js_path).unwrap();
	let mut js = read_to_string(js_path.clone()).unwrap().replace("return await WebAssembly.instantiateStreaming(module, imports);", "const { decompress } = wasm_bindgen;await wasm_bindgen('./wasm_decompress_bg.wasm');let bytes = decompress(new Uint8Array(await module.arrayBuffer())).buffer;return await WebAssembly.instantiate(bytes, imports);");

	js.insert_str(0, &wasm_decompress_js);

	let wasm_bytes = read(wasm_path).unwrap();
	let len = wasm_bytes.len();
	let mut wasm_bytes = Cursor::new(wasm_bytes);


	let mut compressed_bytes = Vec::with_capacity(3000000);

	println!("Original WASM file length: {:.1}MB", len as f32 / 1000000.0);
	println!("Compressing WASM file...");

	let mut params = BrotliEncoderParams::default();
	params.quality = 11;

	BrotliCompress(&mut wasm_bytes, &mut compressed_bytes, &params).unwrap();

	println!("New compressed WASM file length: {:.1}MB\nThe compressed file is {:.1}% the size of the uncompressed one", compressed_bytes.len() as f32 / 1000000.0, (compressed_bytes.len() as f32 / len as f32) * 100.0 );

	println!("Writing new wasm file...");
	write(compressed_wasm_path, compressed_bytes).unwrap();
    write(js_path, js.as_bytes()).unwrap();

}
'''

[tasks.cargo-build-web-release-simd]
env = { "RUSTFLAGS" = "-Ctarget-feature=+simd128,+bulk-memory,+nontrapping-fptoint" }
args = ["build", "--target", "wasm32-unknown-unknown", "--bin", "game", "--features", "web,graphics", "--no-default-features", "--profile", "release-web-simd", "--features", "-Zunstable-options", "-Zbuild-std=panic_abort,std"]
command = "cargo"
dependencies = ["install-target-wasm32-unknown-unknown"]

[tasks.cargo-build-web-opt-simd]
env = { "RUSTFLAGS" = "-Ctarget-feature=+simd128,+bulk-memory,+nontrapping-fptoint" }
args = ["build", "--target", "wasm32-unknown-unknown", "--bin", "game", "--features", "web,graphics", "--no-default-features", "--profile", "opt-web-simd", "--features", "-Zunstable-options", "-Zbuild-std=panic_abort,std"]
command = "cargo"
dependencies = ["install-target-wasm32-unknown-unknown"]

[tasks.cargo-build-web-fast-simd]
env = { "RUSTFLAGS" = "-Ctarget-feature=+simd128,+bulk-memory,+nontrapping-fptoint" }
args = ["build", "--target", "wasm32-unknown-unknown", "--bin", "game", "--features", "web,graphics", "--no-default-features", "--profile", "fast-web-simd", "--features", "-Zunstable-options", "-Zbuild-std=panic_abort,std"]
command = "cargo"
dependencies = ["install-target-wasm32-unknown-unknown"]

[tasks.bindgen-release-simd]
args = ["--out-dir", "target/", "--out-name", "wasm-simd", "--target", "web", "target/wasm32-unknown-unknown/release-web-simd/game.wasm"]
command = "wasm-bindgen"
dependencies = ["cargo-build-web-release-simd", "wasm-bindgen-cli"]

[tasks.bindgen-opt-simd]
args = ["--out-dir", "target/", "--out-name", "wasm-simd", "--target", "web", "target/wasm32-unknown-unknown/opt-web-simd/game.wasm"]
command = "wasm-bindgen"
dependencies = ["cargo-build-web-opt-simd", "wasm-bindgen-cli"]

[tasks.bindgen-fast-simd]
args = ["--out-dir", "target/", "--out-name", "wasm-simd", "--target", "web", "target/wasm32-unknown-unknown/fast-web-simd/game.wasm"]
command = "wasm-bindgen"
dependencies = ["cargo-build-web-fast-simd", "wasm-bindgen-cli"]

[tasks.build-web-fast-simd]
dependencies = ["bindgen-fast-simd", "compress"]

[tasks.build-web-opt-simd]
dependencies = ["bindgen-opt-simd", "compress-release"]

[tasks.build-web-release-simd]
dependencies = ["bindgen-release-simd", "compress-release"]

[tasks.build-native]
args = ["build", "--features", "native,use_wgpu,graphics,bevy/dynamic", "--bin", "game", "--features", "-Z", "unstable-options"]
command = "cargo"

[tasks.build-windows]
args = ["build", "--features", "native,use_wgpu,graphics,bevy/dynamic,openssl/vendored", "--bin", "game", "--target", "x86_64-pc-windows-gnu", "--profile", "dev-windows"]
command = "cargo"

[tasks.build-native-release]
args = ["run", "--features", "native,use_wgpu,graphics", "--release", "--bin", "game", "--features", "-Z", "unstable-options"]
command = "cargo"

[tasks.run]
args = ["run", "--features", "native,use_wgpu,graphics,bevy/dynamic", "--bin", "game", "--features", "-Z", "unstable-options"]
command = "cargo"

[tasks.run-release]
command = "target/release/game"
dependencies = ["build-native-release"]

[tasks.serve-simd]
args = ["-a", "0.0.0.0:4000"]
command = "basic-http-server"
dependencies = ["build-web-opt-simd", "basic-http-server"]

[tasks.serve-release-simd]
args = ["-a", "0.0.0.0:4000"]
command = "basic-http-server"
dependencies = ["build-web-release-simd", "basic-http-server"]

[tasks.serve-opt-simd]
args = ["-a", "0.0.0.0:4000"]
command = "basic-http-server"
dependencies = ["build-web-opt-simd", "basic-http-server"]

[tasks.serve-fast-simd]
args = ["-a", "0.0.0.0:4000"]
command = "basic-http-server"
dependencies = ["build-web-fast-simd", "basic-http-server"]

[tasks.check-native]
args = ["clippy", "--features", "native,use_wgpu,graphics", "--bin", "game", "--", "-D", "warnings", "-Z", "unstable-options"]
command = "cargo"
dependencies = ["install-target-wasm32-unknown-unknown"]

[tasks.check-web]
args = ["clippy", "--features", "web,graphics", "--no-default-features", "--target", "wasm32-unknown-unknown", "--bin", "game", "-Z", "unstable-options", "--", "-D", "warnings"]
command = "cargo"
dependencies = ["install-target-wasm32-unknown-unknown"]

[tasks.check]
dependencies = ["check-web", "check-native"]

[tasks.build-server_cli]
args = ["build", "--bin", "server_cli", "--no-default-features", "--features", "native,bevy/dynamic", "--profile", "server_cli", "-Zunstable-options"]
command = "cargo"

[tasks.build-server_cli-release]
args = ["build", "--bin", "server_cli", "--no-default-features", "--features", "native", "--profile", "server_cli-release", "-Zunstable-options"]
command = "cargo"

[tasks.server_cli]
args = ["run", "--bin", "server_cli", "--no-default-features", "--features", "native,bevy/dynamic", "--profile", "server_cli", "-Zunstable-options"]
command = "cargo"

[tasks.server_cli-release]
args = ["run", "--bin", "server_cli", "--no-default-features", "--features", "native", "--profile", "server_cli-release", "-Zunstable-options"]
command = "cargo"
